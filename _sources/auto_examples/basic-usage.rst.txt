
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/basic-usage.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_basic-usage.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_basic-usage.py:


===================
Basic Usage Example
===================

This is a basic usage example of the `stopuhr` package.

.. GENERATED FROM PYTHON SOURCE LINES 12-13

Stop the time with a simple context manager and print the duration.

.. GENERATED FROM PYTHON SOURCE LINES 13-22

.. code-block:: Python

    import time

    import stopuhr

    timer = stopuhr.Chronometer()

    with timer("Sleeping"):
        time.sleep(0.1)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Sleeping took 0.10s




.. GENERATED FROM PYTHON SOURCE LINES 23-24

stopuhr also provides a default instance of the `Chronometer` class, which is called `stopwatch`.

.. GENERATED FROM PYTHON SOURCE LINES 24-29

.. code-block:: Python

    from stopuhr import stopwatch

    with stopwatch("Sleeping"):
        time.sleep(0.1)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Sleeping took 0.10s




.. GENERATED FROM PYTHON SOURCE LINES 30-31

Instead of printing, one can pass any callable to the `printer` argument, e.g. a logger.

.. GENERATED FROM PYTHON SOURCE LINES 31-42

.. code-block:: Python

    import logging

    logger = logging.getLogger(__name__)
    logger.setLevel(logging.INFO)
    handler = logging.StreamHandler()
    handler.setFormatter(logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s"))
    logger.addHandler(handler)

    with stopwatch("Sleeping", printer=logger.info):
        time.sleep(0.1)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    2025-05-02 13:03:21,154 - __main__ - INFO - Sleeping took 0.10s




.. GENERATED FROM PYTHON SOURCE LINES 43-44

By default, the output is rounded to two decimal places. This can be changed with the `res` argument.

.. GENERATED FROM PYTHON SOURCE LINES 44-47

.. code-block:: Python

    with stopwatch("Sleeping", res=3):
        time.sleep(0.16189)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Sleeping took 0.162s




.. GENERATED FROM PYTHON SOURCE LINES 48-49

We can change the default behaviour by passing the arguments to the `__init__` method of the `Chronometer` class.

.. GENERATED FROM PYTHON SOURCE LINES 49-53

.. code-block:: Python

    timer = stopuhr.Chronometer(printer=logger.info, res=3)
    with timer("Sleeping"):
        time.sleep(0.16189)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    2025-05-02 13:03:21,478 - __main__ - INFO - Sleeping took 0.162s




.. GENERATED FROM PYTHON SOURCE LINES 54-55

Since `stopwatch` is just a `Chronometer` instance, we can just overwrite the default behaviour.

.. GENERATED FROM PYTHON SOURCE LINES 55-60

.. code-block:: Python

    stopwatch.res = 3
    with stopwatch("Sleeping"):
        time.sleep(0.16189)
    stopwatch.res = 2  # back to default





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Sleeping took 0.162s




.. GENERATED FROM PYTHON SOURCE LINES 61-64

The `Chronometer` class is stateful, meaning that it can be used to measure multiple durations at once.
This also supports the `printer` and `res` arguments.
The `log` argument of each call can be used to suppress the output.

.. GENERATED FROM PYTHON SOURCE LINES 64-72

.. code-block:: Python


    for i in range(5):
        with stopwatch("Sleeping", log=False):
            time.sleep(0.2)

    # Print a summary with the mean and standard deviation of the durations.
    stopwatch.summary()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Sleeping (with seconds=0.1) took 0.10 ± 0.00s (n=2 -> total=0.20s)
    Sleeping took 0.17 ± 0.04s (n=9 -> total=1.52s)




.. GENERATED FROM PYTHON SOURCE LINES 73-75

This summary used also the previous calls to the `stopwatch` function to calculate the mean.
We can reset it's state with the `reset` method, note that this is happening in-place.

.. GENERATED FROM PYTHON SOURCE LINES 75-77

.. code-block:: Python

    stopwatch.reset()








.. GENERATED FROM PYTHON SOURCE LINES 78-80

The previous behavior can also be achieved with the `start` and `stop` methods.
Here, the `stop` method also supports the `printer`, `log` and `res` arguments.

.. GENERATED FROM PYTHON SOURCE LINES 80-87

.. code-block:: Python

    for i in range(5):
        stopwatch.start("Sleeping")
        time.sleep(0.2)
        stopwatch.stop("Sleeping", log=False)

    stopwatch.summary()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Sleeping took 0.20 ± 0.00s (n=5 -> total=1.00s)




.. GENERATED FROM PYTHON SOURCE LINES 88-89

The Chronometer can also measure multiple durations at once, thanks to that feature.

.. GENERATED FROM PYTHON SOURCE LINES 89-104

.. code-block:: Python


    stopwatch.reset()

    # Single duration
    with stopwatch("A (single 0.2s sleep)", log=False):
        time.sleep(0.2)

    for i in range(5):
        with stopwatch("B (multiple 0.2s sleeps)", log=False):
            time.sleep(0.2)
        with stopwatch("C (multiple 0.1s sleeps)", log=False):
            time.sleep(0.1)

    stopwatch.summary()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    A (single 0.2s sleep) took 0.20s
    B (multiple 0.2s sleeps) took 0.20 ± 0.00s (n=5 -> total=1.00s)
    C (multiple 0.1s sleeps) took 0.10 ± 0.00s (n=5 -> total=0.50s)




.. GENERATED FROM PYTHON SOURCE LINES 105-107

Because the `Chronometer`'s `__call__` method is a `@contextmanager`, it can be used as a decorator.
This takes the same arguments as the context manager (`res`, `log` and `printer`).

.. GENERATED FROM PYTHON SOURCE LINES 107-118

.. code-block:: Python


    stopwatch.reset()


    @stopwatch("Busy Function")
    def busy_function():
        time.sleep(0.2)


    busy_function()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Busy Function took 0.20s




.. GENERATED FROM PYTHON SOURCE LINES 119-120

Of course, this can be used to measure multiple functions at once.

.. GENERATED FROM PYTHON SOURCE LINES 120-133

.. code-block:: Python


    stopwatch.reset()


    @stopwatch("Busy Function", log=False)
    def busy_function():
        time.sleep(0.1)


    for i in range(5):
        busy_function()

    stopwatch.summary()




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Busy Function took 0.10 ± 0.00s (n=5 -> total=0.50s)





.. _sphx_glr_download_auto_examples_basic-usage.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: basic-usage.ipynb <basic-usage.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: basic-usage.py <basic-usage.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: basic-usage.zip <basic-usage.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
